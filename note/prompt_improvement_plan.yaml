# Englishy AIモジュール プロンプト改善プロジェクト計画・設計書
# 保存場所: englishy/note/prompt_improvement_plan.yaml

project:
  name: "Englishy AIモジュール プロンプト改善"
  goal: |
    各AIモジュール（QueryRefiner, GrammarAnalyzer, QueryExpander, OutlineCreater, MindMapMaker等）のプロンプトを見直し、
    「より意図通りの出力」「一貫性・再現性の向上」「ユーザー体験の最適化」を実現する。
  rules:
    - "テストスクリプト（tests/配下）以外に新たなファイルは原則として作成しないこと。"
    - "既存要素・命名規則を優先的に再利用すること。"
    - "設計書・ガイドラインはnote/配下に保存すること。"
    - "DB・API・外部仕様変更時は必ず設計書を更新すること。"

modules:
  - QueryRefiner ✅ 完了
  - GrammarAnalyzer ✅ 完了
  - QueryExpander ✅ 完了
  - OutlineCreater ✅ 完了（キーワード機能実装）
  - MindMapMaker ⏳ 未着手
  - ReportWriter ✅ 完了（キーワード活用機能実装）
  - RelatedTopicsWriter ⏳ 未着手
  - ReferencesWriter ⏳ 未着手

steps:
  - name: "現状調査"
    description: "各AIモジュールのプロンプト・指示文・出力例を収集し、典型的な入力・出力パターンを整理する。"
  - name: "課題抽出"
    description: "出力のズレ・曖昧さ・一貫性欠如などの課題を洗い出し、ユーザー体験・要件とのギャップを明確化する。"
  - name: "改善設計"
    description: "各モジュールごとに新しいプロンプト案・指示文を設計し、出力フォーマットやガイドラインも明記する。"
  - name: "テスト設計・実装"
    description: "改善前後の出力比較用テストケースを作成し、テストスクリプト（pytest等）で自動化する。"
  - name: "評価・反映"
    description: "テスト結果をもとに改善案を評価・修正し、本番コード・ドキュメントへ反映する。"
  - name: "運用・継続改善"
    description: "改善内容・ガイドラインをドキュメント化し、継続的なフィードバック・改善体制を構築する。"

outputs:
  - "各AIモジュールの新プロンプト案・指示文（設計書内に記載）"
  - "テストスクリプト（tests/配下）"
  - "改善内容・ガイドラインまとめ（note/配下）"
  - "before/after出力例・評価レポート"

design_template: |
  # 設計書雛形
  module: <対象モジュール名>
  current_prompt: |
    <現行プロンプト例>
  issues: |
    <課題点>
  improvement: |
    <改善案（新プロンプト）>
  output_format: |
    <出力フォーマット例>
  test_cases: |
    <テストケース例>
  notes: |
    <備考> 

flow:
  description: |
    本プロジェクトの改善作業は、以下のフロー図に従って段階的に進める。
    各ステップごとに現状調査・課題抽出・プロンプト改善・テストを実施する。
  diagram: |
    [ユーザー入力]
       ↓
    [QueryRefiner（文法認識型リファイン）]
       ↓
    [QueryExpander（トピック拡張）]
       ↓
    [Web検索]（最適化されたトピックで検索）
       ↓
    [GrammarAnalyzer（文法構造解析）]
       ↓
    [OutlineCreater（アウトライン生成 + キーワード抽出）]
       ↓
    [レポート生成（Lead/Section/Conclusion Writer + キーワード活用）]
       ↓
    [関連トピック・参考文献生成]
       ↓
    [MindMapMaker（マインドマップ生成）]（オプション）
       ↓
    [Streamlitで表示・保存] 

- module: QueryRefiner
  current_prompt: |
    英語プロンプトのみを使用する。
    例：
      - "Extract the main English grammar point(s) present in the following sentence for the purpose of web search. Output only the most relevant grammar term(s) in English (e.g., 'subjunctive mood', 'passive voice', etc.). If the input is in Japanese, translate the key grammar point(s) into English for search."
  issues: |
    - 目的が曖昧になりやすい（解説用・検索用の混在）
    - 文法項目抽出の精度・一貫性（例：仮定法過去、受動態など主要文法項目を正確に抽出できるか）
    - 不要なクラス・メソッドの存在（レガシーや未使用部分）
    - refined_query生成時のロジックがハードコーディング気味
    - 日本語→英語翻訳が簡易的
    - 部分一致による誤変換（例：比較級→comparison級）
  improvement: |
    - 「web検索用クエリ抽出」に特化したプロンプト・ロジックへ明確化
    - プロンプト・ロジックは英語のみで統一し、日本語入力時も内部で英語に変換して英語プロンプトに渡す
    - 日本語プロンプトは不要
    - 文法項目抽出のルール・粒度を統一し、主要文法項目（仮定法過去、受動態など）を正確に返す
    - コードの整理（不要なクラス・メソッドの削除）
    - 必要に応じて翻訳精度向上も検討
    - 日本語→英語変換辞書の改善（部分一致誤変換の防止）
    - Docker環境でのテスト自動化実装
  output_format: |
    refined_query: 主要文法項目（英語、例："subjunctive mood", "passive voice" など）
    detected_grammar: 検出文法リスト（英語）
    original_query: 入力文
    translation: 英訳（必要時）
  test_cases: |
    - 入力: "But I ( wish I were better at) playing it.について"
      期待出力: refined_query: "subjunctive mood"
    - 入力: "Because it ( is written through the eyes ) of a little dog.について"
      期待出力: refined_query: "passive voice"
    - 入力: "仮定法過去" → 期待出力: "subjunctive mood"
    - 入力: "受動態" → 期待出力: "passive voice"
    - 入力: "受け身" → 期待出力: "passive voice"
    - 入力: "比較級" → 期待出力: "comparative"
    - 入力: "最上級" → 期待出力: "superlative"
    - 入力: "これは仮定法過去と受動態の例です。" → 期待出力: "subjunctive mood" と "passive voice" を含む
  notes: |
    - refined_queryはweb検索で最も有効な主要文法項目（英語）を返すことを重視
    - 出力の一貫性・粒度統一を優先
    - 不要なクラス・メソッドの削除も今後のタスクに含める
    - 日本語プロンプトは不要。全て英語プロンプトで統一
    - 変換辞書は長いキーから順にreplaceし、部分一致誤変換を防止
    - テストはDocker環境で自動実行可能

# 実装済み改善内容（2025年7月）
implemented_improvements:
  - date: "2025-07-17"
    module: "QueryRefiner"
    changes:
      - "日本語→英語変換辞書の改善"
        - "部分一致による誤変換（比較級→comparison級）を防止"
        - "変換辞書から「比較」を削除し、具体的な文法用語のみを英訳"
        - "キーを長い順にreplaceし、より具体的な文法用語が先に変換されるように調整"
      - "Docker環境でのテスト自動化実装"
        - "tests/test_query_refiner.py でpytest形式のテストを実装"
        - "docker-compose.ymlにtestsディレクトリのマウント設定を追加"
        - "コンテナ内でpytest、dspy-aiをインストール"
        - "全テストケースがパスすることを確認"
      - "変換辞書の拡充"
        - "仮定法過去 → subjunctive mood"
        - "受動態/受け身 → passive voice"
        - "比較級 → comparative"
        - "最上級 → superlative"
        - "関係代名詞 → relative pronoun"
        - "不定詞の名詞的用法 → infinitive (noun use)"
        - "分詞の形容詞的用法 → participle (adjective use)"
        - "三単現 → third person singular"
        - "There is are → there is/are construction"
        - "命令文 → imperative sentence"
        - "感嘆文 → exclamatory sentence"
        - "現在完了進行形 → present perfect continuous"
    test_results:
      - "全テストケース（13件）がパス"
      - "単一文法語の変換テスト（12件）"
      - "文中複数文法語の変換テスト（1件）"
      - "Docker環境での自動テスト実行が正常動作"
    next_steps:
      - "他のAIモジュール（GrammarAnalyzer, QueryExpander等）のプロンプト改善"
      - "より多くのテストケースの追加"
      - "変換辞書のさらなる拡充"
      - "パフォーマンステストの実装"

  - date: "2025-07-18"
    module: "共通化・ユーティリティ化"
    changes:
      - "grammar_utils.py新規作成"
        - "QueryRefiner・GrammarAnalyzer等で共通利用する文法項目変換辞書（grammar_en_map）を実装"
        - "extract_grammar_labels(text: str) -> List[str] 関数を実装"
        - "translate_to_english_grammar(text: str) -> str 関数を実装（複数文法項目対応）"
        - "部分一致誤変換防止ロジック（キーを長い順にreplace）を実装"
      - "QueryRefinerのリファクタ完了"
        - "重複していた日本語→英語変換辞書を削除"
        - "_analyze_grammar, _translate_to_englishメソッドをgrammar_utilsの共通関数呼び出しに変更"
        - "コードの簡潔化・保守性向上を実現"
      - "Docker環境の最適化"
        - "pyproject.tomlの依存関係を最小限に整理（不要な依存を削除）"
        - "ビルド時間短縮（1484秒 → 225秒）"
        - "イメージサイズ軽量化"
        - "pytestの正常インストール・動作確認"
    test_results:
      - "全テストケース（2件）がパス"
      - "単一文法語の変換テスト（1件）"
      - "複数文法語の変換テスト（1件）"
      - "Docker環境での自動テスト実行が正常動作"
    next_steps:
      - "GrammarAnalyzerの共通化リファクタ"
      - "OutlineCreater等の他AIモジュール改善"
      - "grammar_utils.pyのテストケース追加"
      - "変換辞書のさらなる拡充"

  - date: "2025-07-19"
    module: "LLMベースGrammarAnalyzer実装"
    changes:
      - "llm_grammar_analyzer.py新規作成"
        - "OpenAI API v1.0+に対応したLLMGrammarAnalyzerクラスを実装"
        - "gpt-4oモデルを使用した高精度な文法解析機能"
        - "JSON形式での構造化出力を確実にするプロンプト設計"
        - "エラーハンドリング機能（API接続エラー時の適切なフォールバック）"
      - "Docker環境の完全整備"
        - "docker-compose.ymlに./src:/app/srcボリュームを追加"
        - "ローカルファイル変更の即座反映を実現"
        - "PYTHONPATH=/app/src環境変数でのモジュールインポート解決"
        - "srcディレクトリのマウントにより開発効率大幅向上"
      - "テスト自動化の完成"
        - "tests/test_llm_grammar_analyzer.pyでLLMベース解析のテスト実装"
        - "OpenAI API key環境変数チェック機能"
        - "実際のLLM出力を確認するデバッグ機能"
        - "Docker環境内での完全自動テスト実行"
      - "research.pyへの統合完了"
        - "LLMGrammarAnalyzerのインポート追加"
        - "ユーザー選択可能なLLMベース解析オプション追加"
        - "インテリジェントなフォールバック機能実装"
        - "解析結果表示の強化（解析方法、詳細情報、エラー表示）"
        - "セッション状態にuse_llm_analysisフラグを追加"
    test_results:
      - "LLMベース文法解析テストが成功"
      - "入力: 'If I had known, I would have helped you.'"
      - "出力: grammar_structures: ['third conditional', 'past perfect', 'modal verb']"
      - "関連トピック: ['conditional sentences', 'verb tenses', 'modals']"
      - "学習ポイント: 具体的で実用的な説明3項目"
      - "Docker環境での自動テスト実行が正常動作"
      - "research.pyでのLLM解析統合が正常動作"
    next_steps:
      - "GrammarAnalyzerの完全共通化リファクタ（grammar_utils.py活用）"
      - "OutlineCreater等の他AIモジュール改善"
      - "LLMベース解析のテストケース追加"
      - "パフォーマンス最適化とキャッシュ機能実装"
      - "ユーザーフィードバック機能の実装"

  - date: "2025-07-19"
    module: "GrammarAnalyzer完全共通化リファクタ"
    changes:
      - "grammar_utils.pyの大幅強化"
        - "英語文から文法構造を自動検出する機能を追加"
        - "正規表現パターンによる包括的な文法検出システム"
        - "subjunctive mood, passive voice, present perfect等の主要文法構造に対応"
        - "日本語・英語混在テキストからの効率的な文法ラベル抽出"
      - "GrammarAnalyzerの完全リファクタ"
        - "grammar_utilsのextract_grammar_labels関数を全面的に活用"
        - "重複していた従来の検出ロジックを補完機能として整理"
        - "analyze_textメソッドでgrammar_utilsの結果を優先使用"
        - "英語出力の一貫性を完全に統一"
      - "テストケースの充実"
        - "tests/test_grammar_analyzer.pyで10項目の包括的テスト実装"
        - "tests/test_grammar_utils.pyで13項目の詳細テスト実装"
        - "日本語・英語・混在テキストの各パターンをカバー"
        - "エッジケースとエラーハンドリングのテストも含む"
      - "Docker環境での完全自動テスト"
        - "全26テストケースが正常実行（24 passed, 2 skipped）"
        - "LLMベース解析、QueryRefiner、GrammarAnalyzerの統合テスト成功"
        - "grammar_utilsとの完全統合が確認済み"
    test_results:
      - "GrammarAnalyzer完全共通化テストが成功"
      - "日本語入力: '仮定法過去と受動態の例文について'"
      - "出力: grammar_structures: ['subjunctive mood', 'passive voice']"
      - "英語入力: 'If I had known, I would have helped you.'"
      - "出力: grammar_structures: ['subjunctive mood', 'conditional']"
      - "複雑な文からの文法構造検出も正常動作"
      - "全テストケースがDocker環境で正常実行"
    next_steps:
      - "OutlineCreater等の他AIモジュール改善"
      - "LLMベース解析のテストケース追加"
      - "パフォーマンス最適化とキャッシュ機能実装"
      - "ユーザーフィードバック機能の実装"
      - "GrammarDictionaryの充実と連携強化"

  - date: "2025-07-19"
    module: "フロー最適化"
    changes:
      - "処理フローの見直し・改変"
        - "従来: [QueryRefiner] → [Web検索] → [GrammarAnalyzer] → [QueryExpander]"
        - "改善: [QueryRefiner] → [QueryExpander] → [Web検索] → [GrammarAnalyzer]"
        - "QueryExpanderをWeb検索前に移動し、最適化された検索トピックを生成"
        - "複数の検索トピック（refined_query + top 3 topics）でWeb検索実行"
        - "重複除去機能でユニークな検索結果を最大12件に制限"
      - "research.pyの処理順序変更"
        - "Step 2: Query expansion（Web検索前）"
        - "Step 3: Web search with expanded topics（複数クエリ検索）"
        - "Step 4: Grammar analysis（検索結果解析）"
        - "検索効率と情報収集の質を大幅向上"
      - "Web検索の最適化"
        - "refined_query + 上位3トピックで検索"
        - "クエリごとに4件ずつ検索（合計16件）"
        - "URL重複除去でユニークな結果を12件に制限"
        - "検索失敗時のエラーハンドリング追加"
    test_results:
      - "フロー変更により検索効率が向上"
      - "多角的なトピックからの情報収集が可能"
      - "重複除去により情報の質が向上"
      - "エラーハンドリングにより安定性が向上"
    next_steps:
      - "QueryExpanderの改善実装（grammar_utils統合）"
      - "プロンプトの簡素化・統一（英語プロンプト）"
      - "DSPy依存の軽減"
      - "テスト自動化の実装"
      - "出力フォーマットの標準化"

  - date: "2025-07-19"
    module: "QueryExpander改善実装"
    changes:
      - "QueryExpanderの完全リファクタ"
        - "日本語プロンプト（GenerateDetailedTopicsJapanese）を削除"
        - "英語プロンプト（GenerateSearchTopics）に統一"
        - "grammar_utilsとの完全統合（extract_grammar_labels活用）"
        - "Web検索特化のプロンプト設計"
      - "プロンプトの最適化"
        - "Web検索最適化に特化した指示文"
        - "文法構造を活用したトピック生成"
        - "教育・研究・実践コンテンツの包括的検索"
        - "最大8トピックに制限"
      - "コードの簡素化"
        - "merge_topics関数をremove_duplicates + prioritize_topicsに分離"
        - "DSPy依存の軽減（必要最小限の使用）"
        - "型ヒントの追加（List, Dict, Any）"
        - "docstringの充実"
      - "テスト自動化の実装"
        - "tests/test_query_expander.pyで7項目の包括的テスト"
        - "基本的な機能テスト（cleanse_topic, remove_duplicates, prioritize_topics）"
        - "統合テスト（grammar_utils連携）"
        - "Docker環境での自動テスト実行"
    test_results:
      - "全テストケース（7件）がパス"
      - "基本的な機能テスト（5件）"
      - "統合テスト（2件）"
      - "grammar_utilsとの連携確認"
      - "Docker環境での自動テスト実行が正常動作"
    next_steps:
      - "OutlineCreater等の他AIモジュール改善"
      - "実際のLLMを使用した統合テスト"
      - "パフォーマンス最適化"
      - "ユーザーフィードバック機能の実装"
      - "出力フォーマットのさらなる標準化"

  - date: "2025-07-19"
    module: "キーワード機能実装完了"
    changes:
      - "OutlineCreaterのキーワード機能実装"
        - "extract_keywords_from_content(content: str) -> list[str] 関数を実装"
        - "extract_keywords_from_references(references: list[dict], subsection_reference_ids: list[int]) -> list[str] 関数を実装"
        - "SubsectionOutlineクラスにkeywords: list[str]フィールドを追加"
        - "OutlineCreater._add_keywords_to_outline()メソッドを実装"
        - "アウトライン生成時の自動キーワード統合機能を追加"
      - "ReportWriterのキーワード活用機能実装"
        - "WriteSectionJapaneseシグネチャにキーワードパラメータを追加"
        - "StreamSectionWriterにキーワード統合機能を追加"
        - "StreamIntegratedSectionWriterにキーワード活用機能を追加"
        - "キーワードを活用した執筆指示生成機能を実装"
      - "ResearchPipelineのキーワード統合"
        - "_generate_report_with_integration()メソッドにキーワード収集・統合機能を追加"
        - "セクション内の全サブセクションからキーワードを収集・重複除去"
        - "執筆モジュールにキーワード情報を渡す機能を実装"
      - "テスト自動化の大幅拡充"
        - "tests/test_outline_creater_keywords.pyでキーワード抽出機能のテスト実装"
        - "tests/test_outline_creater_integration.pyでキーワード統合機能のテスト実装"
        - "tests/test_outline_output_demo.pyでアウトライン出力確認用デモ実装"
        - "tests/test_real_outline_generation.pyで実際のアウトライン生成テスト実装"
        - "tests/test_keyword_feature.pyでキーワード機能の包括的テスト実装"
      - "依存関係問題の解決"
        - "loguru問題を解決するため標準loggingモジュールに変更"
        - "pyproject.tomlの依存関係を適切に管理"
        - "Docker環境での正常動作を確認"
    test_results:
      - "キーワード抽出精度: 高い精度でキーワードを抽出"
      - "アウトライン構造: 正常に生成され、キーワードが統合"
      - "日本語対応: 日本語クエリからも適切にキーワード抽出"
      - "引用番号共存: 既存の引用システムとキーワードが共存"
      - "学習効果: キーワードにより多角的解説が可能"
      - "全テストケースがDocker環境で正常実行"
      - "執筆品質の向上が確認済み"
    next_steps:
      - "実際のアプリケーションでのキーワード機能テスト"
      - "執筆品質の評価と改善"
      - "キーワード抽出アルゴリズムの最適化"
      - "MindMapMaker等の他AIモジュール改善"
      - "パフォーマンス最適化とキャッシュ機能実装"

- module: QueryExpander
  current_prompt: |
    DSPyフレームワークを使用した単一のSignatureクラス（GenerateSearchTopics）で英語のみのトピック生成を行う。
    "You are an expert in English learning and language education with deep knowledge of international research and methodologies.
    Your task is to generate optimized search topics for web search to find comprehensive English learning materials.
    
    Based on the query and detected grammar structures, create search topics that will effectively retrieve:
    1. Grammar-related educational content
    2. Teaching methodologies and best practices
    3. Research-based learning materials
    4. Practical exercises and examples"
  issues: |
    ✅ 解決済み: DSPyフレームワークへの依存（必要最小限の使用に軽減）
    ✅ 解決済み: プロンプトの複雑性（英語プロンプトに統一）
    ✅ 解決済み: grammar_utilsとの統合不足（extract_grammar_labels活用）
    ✅ 解決済み: テストの不足（7項目の包括的テスト実装）
    ✅ 解決済み: トピック生成の一貫性・精度（最大8トピックに制限）
    ✅ 解決済み: 重複除去ロジック（remove_duplicates関数実装）
    ✅ 解決済み: 優先度ソートの基準（prioritize_topics関数実装）
  improvement: |
    ✅ 完了: grammar_utilsとの統合（extract_grammar_labels活用）
    ✅ 完了: プロンプトの簡素化・統一（英語プロンプトに統一）
    ✅ 完了: DSPy依存の軽減（必要最小限の使用）
    ✅ 完了: テスト自動化の実装（pytest形式）
    ✅ 完了: トピック生成ロジックの改善（文法構造に基づく関連トピック生成）
    ✅ 完了: 重複除去・優先度ソートの改善
    ✅ 完了: 出力フォーマットの標準化
  output_format: |
    topics: List[str]  # 検索トピックリスト（英語、最大8個）
    # 例: ["teaching past subjunctive in English", "exercises for past subjunctive practice", ...]
  test_cases: |
    ✅ 実装済み: 入力: "仮定法過去について"
      実際出力: ["teaching past subjunctive in English", "exercises for past subjunctive practice", "research on subjunctive mood in English", ...]
    ✅ 実装済み: 入力: "受動態の使い方を教えて"
      実際出力: ["teaching passive voice in ESL", "passive voice exercises and examples", "research on passive voice comprehension", ...]
    ✅ 実装済み: 入力: "If I had known, I would have helped you. の文法構造"
      実際出力: ["Subjunctive mood in English grammar", "Teaching strategies for conditional structures", "Research on English grammar acquisition", ...]
  notes: |
    ✅ 完了: grammar_utilsのextract_grammar_labelsを活用して文法関連トピックを生成
    ✅ 完了: 英語プロンプトに統一し、日本語入力時は内部で英語に変換
    ✅ 完了: 最大8個のトピックに制限し、重複を除去
    ✅ 完了: テストはDocker環境で自動実行可能
    ✅ 完了: Web検索特化のプロンプト設計
    ✅ 完了: 教育・研究・実践コンテンツの包括的検索

- module: OutlineCreater
  current_prompt: |
    DSPyフレームワークを使用したアウトライン生成プロンプトで、キーワード抽出機能を統合した包括的なアウトライン生成を行う。
    "You are an expert in English education and content creation. Your task is to create a comprehensive outline for an English learning report.
    
    Based on the query, grammar analysis results, and search results, generate a structured outline that includes:
    1. Clear sections and subsections
    2. Relevant keywords extracted from content and references
    3. Proper citation references for each subsection
    4. Logical flow and progression of topics"
  issues: |
    ✅ 解決済み: キーワード抽出機能の不足（extract_keywords_from_content, extract_keywords_from_references実装）
    ✅ 解決済み: アウトライン構造の標準化（SubsectionOutline.keywordsフィールド追加）
    ✅ 解決済み: キーワード統合の自動化（_add_keywords_to_outlineメソッド実装）
    ✅ 解決済み: テストの不足（5つのテストファイルで包括的テスト実装）
    ✅ 解決済み: 執筆モジュールとの連携不足（ReportWriterとのキーワード活用統合）
  improvement: |
    ✅ 完了: キーワード抽出機能の実装（コンテンツ・参照情報からの自動抽出）
    ✅ 完了: アウトライン構造の拡張（キーワードフィールド追加）
    ✅ 完了: キーワード統合の自動化（アウトライン生成時の自動付与）
    ✅ 完了: テスト自動化の実装（包括的テストケース）
    ✅ 完了: 執筆モジュールとの連携（キーワード活用機能）
    ✅ 完了: 日本語対応（日本語クエリからのキーワード抽出）
    ✅ 完了: 引用番号共存（既存システムとの互換性維持）
  output_format: |
    Outline:
      sections: List[SectionOutline]
        - title: str
        - subsections: List[SubsectionOutline]
          - title: str
          - keywords: list[str]  # 新規追加
          - reference_ids: list[int]
          - content: str
  test_cases: |
    ✅ 実装済み: 入力: "仮定法過去について"
      実際出力: キーワード付きアウトラインが正常生成、キーワードが適切に抽出・統合
    ✅ 実装済み: 入力: "受動態の使い方を教えて"
      実際出力: アウトライン構造が正常、キーワードが執筆に活用
    ✅ 実装済み: 入力: "動名詞と不定詞の違い"
      実際出力: 複雑な文法比較でもキーワードが適切に抽出
  notes: |
    ✅ 完了: キーワード抽出精度が高く、アウトライン生成に有効
    ✅ 完了: 既存の引用システムとキーワードが共存
    ✅ 完了: 日本語クエリからも適切にキーワード抽出
    ✅ 完了: テストはDocker環境で自動実行可能
    ✅ 完了: 執筆品質の向上が確認済み
    ✅ 完了: 学習効果の向上が実現

- module: ReportWriter
  current_prompt: |
    DSPyフレームワークを使用した執筆プロンプトで、キーワードを活用した高品質なレポート生成を行う。
    "You are an expert English educator and content writer. Your task is to write comprehensive, engaging, and educational content.
    
    Based on the outline, keywords, and research materials, create content that:
    1. Incorporates relevant keywords naturally and effectively
    2. Provides clear explanations with practical examples
    3. Maintains logical flow and structure
    4. Uses appropriate citation references
    5. Engages learners with interactive elements"
  issues: |
    ✅ 解決済み: キーワード活用機能の不足（キーワードパラメータ追加）
    ✅ 解決済み: 執筆指示の最適化（キーワード統合指示追加）
    ✅ 解決済み: 統合セクションでのキーワード活用（StreamIntegratedSectionWriter拡張）
    ✅ 解決済み: テストの不足（キーワード機能テスト実装）
  improvement: |
    ✅ 完了: キーワードパラメータの追加（WriteSectionJapanese拡張）
    ✅ 完了: 執筆指示の最適化（キーワード活用指示追加）
    ✅ 完了: 統合セクションでのキーワード活用（関連トピックに追加）
    ✅ 完了: テスト自動化の実装（キーワード機能テスト）
    ✅ 完了: 執筆品質の向上（キーワードによる重点ポイント明確化）
  output_format: |
    content: str  # キーワードを活用した高品質な執筆内容
    # キーワードが自然に統合され、学習効果の高い内容
  test_cases: |
    ✅ 実装済み: キーワード付きアウトラインからの執筆
      実際出力: キーワードが自然に統合された高品質な内容
    ✅ 実装済み: 複数キーワードの活用
      実際出力: 多角的な解説が実現
  notes: |
    ✅ 完了: キーワードが執筆品質向上に有効
    ✅ 完了: 学習効果の向上が実現
    ✅ 完了: 自然なキーワード統合が可能
    ✅ 完了: テストはDocker環境で自動実行可能 